\documentclass[12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage{float}
\usepackage{amsmath}
\usepackage{tikz}


\usepackage[hmargin=3cm,vmargin=6.0cm]{geometry}
%\topmargin=0cm
\topmargin=-2cm
\addtolength{\textheight}{6.5cm}
\addtolength{\textwidth}{2.0cm}
%\setlength{\leftmargin}{-5cm}
\setlength{\oddsidemargin}{0.0cm}
\setlength{\evensidemargin}{0.0cm}

%misc libraries goes here



\begin{document}

\section*{Student Information } 
%Write your full name and id number between the colon and newline
%Put one empty space character after colon and before newline
Full Name :  Damlanur Yağdı\\
Id Number :  2522118\\

% Write your answers below the section tags
\section*{Answer 1}

\subsection*{a) }
Degrees of all nodes:\\
   $ a \to 3 $\\
    $b \to 3 $\\
    $c \to 3$\\
    $d \to 2$ \\
    $e \to 3$\\
Hence, the sum of them = 14.


\subsection*{b) }
\begin{center}
    

Adjacency matrix representation of $G$\\

        
        \begin{tabular}{c |  c c c c c }
               & a & b & c & d & e  \\
            \hline
            a & 0 & 1 & 1 & 0 & 1 \\
            b & 1 & 0 & 1 & 0 & 1 \\
            c & 1 & 1 & 0 & 1 & 0 \\
            d & 0 & 0 & 1 & 0 & 1 \\
            e & 1 & 1 & 0 & 1 & 0 \\
            
        \end{tabular}

  $\downarrow$
  
$
\begin{pmatrix}
0 & 1 & 1 &0 &1\\
1 & 0 & 1 &0 &1\\
1 & 1 & 0 &1 &0\\
0 & 0 & 1 &0 &1\\
1 & 1 & 0 &1 &0
\end{pmatrix}
$


  \end{center}   
Hence, the number of non-zero entries in the adjacency matrix representation of $G$ = 14.


\subsection*{c) }

The rows of the matrix $[A_C]$ represent the number of nodes and the column of the matrix $[A_C]$ represent the number of branches in the given graph. \\
In the graph $G$, we have 5 nodes such as $a, b, c, d, e$.\\
There are also 7 branches, which we can represent as followings.\\

\begin{tikzpicture}


\node (b) at (5, 2) [shape= circle, draw] {b};
\node (c) at (8,2) [shape= circle, draw] {c};
\node (e) at (8,0) [shape = circle, draw] {e};



\node (a) at (5,0) [shape= circle, draw] {a};

\node (d) at (10,0) [shape=circle, draw] {d};

\path [-] (a)edge node[above left]{1} (b);
\path [-] (b)edge node[ left]{5} (e);

\path [-] (a)edge node[right]{6} (c);
\path [-] (b)edge node[above left]{2} (c);

\path [-] (c)edge node[above left]{3} (d);
\path [-] (d)edge node[above right]{4} (e);

\path [-] (e)edge node[above right]{7} (a);



\end{tikzpicture}

To avoid confusion, the branch between a and c = 6 , the branch between b and e = 5.\\


${[A_C]} $= 

\begin{tabular}{c |  c c c c c c c}
               & 1 &2 & 3 & 4 & 5 &6 &7 \\
            \hline
            a & 1 & 0 & 0 & 0 & 0 &1 &1 \\
            b & 1 & 1 & 0 & 0 & 1 &0 &0\\
            c & 0 & 1 & 1 & 0 & 0 &1 &0 \\
            d & 0 & 0 & 1 & 1 & 0 &0 &0 \\
            e & 0 & 0 & 0 & 1 & 1 &0 &1 \\
            
        \end{tabular}


The number of zero entries in the incidence matrix = 21.




\subsection*{d) }

According to the definition of the textbook, the complete graph of n vertices refers that an undirected graph with
n vertices where each pair of vertices is connected by an edge. In the graph $G$, there is no complete graph of at least four vertices, since all of the vertices are not connected by an edge. \\
For example, if we choose the vertices $a, b, c,$ and $e$ since there is no edge between $ e $ and $c$ there will not be a complete graph.

\subsection*{e) }
According to the definition of the textbook, a bipartite graph refers to a graph with a vertex set that can be partitioned into subsets $V_1$ and $V_2$ so that each edge connects a vertex
in $V_1$ and a vertex in $V_2.$ The pair $(V_1, V_2)$ is called a bipartition of $V$.\\
Let's create a vertex set for $G$ that can be partitioned into two sets.\\
\begin{itemize}
    \item Let's choose 3 vertices for $V_1$ and 2 vertices for $V_2$\\ According to the definition of bipartite graphs, sets $V_1$ and $V_2$ should have the same size. Because in the graph $G$, every edge should be connected to a vertex in both $V_1$ and $V_2$. In this case, it can be clearly seen that every edge of $G$ does not connect a vertex in $V_1$ and a vertex in $V_2$\\.
    \item We can create $V_1$ and $V_2$ with sizes (2,3) as well. Similarly, every edge of $G$ does not connect a vertex in  $V_1$ and a vertex $V_2$\\.
    \item Other options are to create two disjoint sets with the sizes (4,1) and (1,4), again every edge of $G$ does not connect a vertex in  $V_1$ and a vertex $V_2$.\\

\end{itemize}
Hence, $G$ is not bipartite.
    




\subsection*{f) }

According to the definition of the textbook, the underlying undirected graph of a graph with directed
edges refers to the undirected graph obtained by ignoring the directions of the edges.\\
To find the directed graphs, we can now consider all possibilities.\\
Every edge of $G$ can be in two different forms. Let's consider the edge between $a$ and $b$.
\begin{itemize}
    \item First possibility is that the direction of the edge can be from a to b.
    \item Second possibility is that the direction of the edge can be from b to a.
    
\end{itemize}
Since $G$ has 7 edges, there are 2 possibilities for 7 vertices. Hence there are $2^7$  directed graphs that have $G$ as their underlying undirected graph.








\subsection*{g) }

The length of the simple longest path in $G$ is 4, and the path is $a, b, c, d, e $. It can be visualized as follows.

\begin{tikzpicture}


\node (b) at (5, 2) [shape= circle, draw] {b};
\node (c) at (8,2) [shape= circle, draw] {c};
\node (e) at (8,0) [shape = circle, draw] {e};



\node (a) at (5,0) [shape= circle, draw] {a};

\node (d) at (10,0) [shape=circle, draw] {d};

\path [-] (a)edge node[above left]{} (b);
%\path [-] (a)edge node[above]{5} (d);

\path [-] (b)edge node[above left]{} (c);

\path [-] (c)edge node[above left]{} (d);
\path [-] (d)edge node[above right]{} (e);




\end{tikzpicture}




\subsection*{h) }

According to the definition of the textbook, a connected component of a graph $G$ is a connected subgraph of $G$ that is not a proper subgraph of another connected subgraph of $G$. That is, a connected component of a graph $G$ is a maximal connected subgraph of $G.$\\
In this question, the number of connected components of $G$ is 1, since every component can be extended until it becomes the graph $G$ itself. Moreover, graph $G$ is a subgraph of itself. So, the answer is 1.










\subsection*{i) }
\begin{itemize}
    \item Theorem 1 from section 10.5 of the textbook says that:\\
    
        A connected multigraph with at least two vertices has an Euler circuit if and only if each of its vertices has an even degree.
    \item Since the Graph $G$ is a connected multigraph with 5 vertices, we should check if each vertex has even degrees.
    \item Degrees of the vertices:\\
   $ a \to 3 $\\
    $b \to 3 $\\
    $c \to 3$\\
    $d \to 2$ \\
    $e \to 3$\\
    \item We can clearly see that, vertices $a, b, c, e$ have odd degrees.
    \item Therefore, Graph $G$ does not have an Euler Circuit.
        
    
\end{itemize}


\subsection*{j) }

\begin{itemize}
    \item Theorem 1 from section 10.5 of the textbook says that:\\
    
        A connected multigraph has an Euler path but not an Euler circuit if and only if it has exactly two vertices of odd degree
    \item Since the Graph $G$ is a connected multigraph with 5 vertices, we should check the degrees of each vertex.
    \item Degrees of the vertices:\\
   $ a \to 3 $\\
    $b \to 3 $\\
    $c \to 3$\\
    $d \to 2$ \\
    $e \to 3$\\
    \item We can clearly see that, 4 vertices have odd degrees, whereas 1 vertex has an even degree
    \item Therefore, Graph $G$ does not have an Euler Path.
        
    
\end{itemize}



\subsection*{k) }

\begin{itemize}
    \item ORE’S THEOREM says that if $G$ is a simple graph with n vertices with $n \geq  3$ such that $deg(u) + deg(v) \geq n $ for every pair of nonadjacent vertices and v in $G$, then $G$ has a Hamilton circuit.
    \item $G$ has 5 vertices and the degrees of the vertices are:\\
    $a \to 3 $\\
    $b \to 3 $\\
    $c \to 3$\\
    $d \to 2$ \\
    $e \to 3$\\
    \item Let's check Ore's Theorem's conditions for $G$.
    \item First, we have a simple graph with 5 vertices, which is $\geq 3$.
    \item Second, we should check the sum of the degrees of nonadjacent vertices, which are $(a,d), (b,d), (c,e)$.
    \item 
    $deg(a) + deg(d) = 5 \geq n = 5$\\
    $deg(b) + deg(d) = 5 \geq n = 5$\\
    $deg(c) + deg(e) = 6 \geq n = 5$
    \item Graph $G$ meets the conditions of Ore's Theorem. That is why $G$ has a Hamilton circuit.
    \item Hamiltonian circuit should visit every vertex once. It also begins and ends at the same vertex. Hence our circuit is $a-b-c-d-e-a$.
    \item It can be visualized as followings:\\
    \begin{tikzpicture}


\node (b) at (5, 2) [shape= circle, draw] {b};
\node (c) at (8,2) [shape= circle, draw] {c};
\node (e) at (8,0) [shape = circle, draw] {e};



\node (a) at (5,0) [shape= circle, draw] {a};

\node (d) at (10,0) [shape=circle, draw] {d};

\path [-] (a)edge node[above left]{} (b);
%\path [-] (a)edge node[above]{5} (d);

\path [-] (b)edge node[above left]{} (c);

\path [-] (c)edge node[above left]{} (d);
\path [-] (d)edge node[above right]{} (e);

\path [-] (e)edge node[above right]{} (a);



\end{tikzpicture}
\end{itemize}




\subsection*{l) }
\begin{itemize}
    \item Hamiltonian path should visit every vertex once. Unlike the Hamiltonian circuit, it does not begin and end at the same vertex. 
    \item Hence, our Hamiltonian path can be $a-b-c-d-e$.
    \item It can be visualized as followings:
\end{itemize}

  \begin{tikzpicture}
  
\node (b) at (5, 2) [shape= circle, draw] {b};
\node (c) at (8,2) [shape= circle, draw] {c};
\node (e) at (8,0) [shape = circle, draw] {e};



\node (a) at (5,0) [shape= circle, draw] {a};

\node (d) at (10,0) [shape=circle, draw] {d};

\path [-] (a)edge node[above left]{} (b);
%\path [-] (a)edge node[above]{5} (d);

\path [-] (b)edge node[above left]{} (c);

\path [-] (c)edge node[above left]{} (d);
\path [-] (d)edge node[above right]{} (e);


\end{tikzpicture}
















\section*{Answer 2}
If two graphs are isomorphic, then they have:
\begin{itemize}
    \item Equal number of vertices.
    \item Equal number of edges.
    \item Same degree sequence.
    \item Same number of circuits of a particular length.
\end{itemize}
Let's check if $G$ and $H$ meet these conditions.\\
1-) There are 5 vertices in both graphs.\\
2-) There are 5 edges in both graphs.\\
3-) Each vertex in the graph $G$ has degree 2. This statement is also true for the graph $H$.\\
4-) They have exactly the same circuit of a particular length, which is 5.\\

Moreover, when we define a bijective function $f(x)$ from $G$ to $H$ the mapping is :
$$  f(a) =  a'$$ $$ f(b) = b' $$ $$ f(c) = c' $$ $$ f(d) = d' $$ $$ f(e) = e' $$
The above correspondence preserves adjacency as $a$ is adjacent to $b$, and $b$ is adjacent to $c$ in $G$, whereas $a'$ is adjacent to $b', b'$ is adjacent to $c'$ in $H$.\\
Similarly, it can be shown that adjacency is preserved for all vertices.\\
Therefore the
graphs $G$ and $H$ are isomorphic. 

\section*{Answer 3}
In this question, I assigned infinity to the unvisited nodes. In each iteration, while visiting the neighbors, I wrote the weight of every visited vertex as an exponent to the vertex. If I had found a smaller distance to that neighbor I updated the weight of that vertex. 


\subsubsection*{Step 0}
$s$ is our starting node. Hence I assigned 0 to it since the distance to itself is 0. This is our initial condition.

	\begin{center}
	    
	
	\begin{tikzpicture}
	\node[shape=circle,draw=black] (s) at (1, 2)     {\textbf{s$^0$}};
	\node[shape=circle,draw=black] (u) at (2, 4)     {\textbf{u$^\infty$}};
	\node[shape=circle,draw=black] (v) at (3, 2)     {\textbf{v$^\infty$}};
	\node[shape=circle,draw=black] (w) at (2, 0)     {\textbf{w$^\infty$}};
	\node[shape=circle,draw=black] (x) at (5, 2)     {\textbf{x$^\infty$}};
	\node[shape=circle,draw=black] (y) at (6, 4)     {\textbf{y$^\infty$}};
	\node[shape=circle,draw=black] (z) at (6, 0)     {\textbf{z$^\infty$}};
	\node[shape=circle,draw=black] (t) at (7, 2)     {\textbf{t$^\infty$}};
	\path[-] (s) edge node[left]{4} (u);
	\path[-] (s) edge node[above]{5} (v);
	\path[-] (u) edge [bend right=90] node[left]{1} (w);
	\path[-] (u) edge node[above]{11} (y);
	\path[-] (u) edge node[right]{8} (v);
	\path[-] (v) edge node[above]{6} (y);
	\path[-] (v) edge node[above]{2} (x);
	\path[-] (v) edge node[right]{3} (w);
	\path[-] (w) edge node[left]{3} (s);
	\path[-] (w) edge node[below]{8} (x);
	\path[-] (w) edge node[below]{12} (z);
	\path[-] (x) edge node[left]{1} (y);
	\path[-] (x) edge node[left]{6} (z);
	\path[-] (y) edge node[left]{4} (z);
	\path[-] (y) edge node[right]{9} (t);
	\path[-] (z) edge node[right]{3} (t);
	\end{tikzpicture} 
\end{center}


\subsubsection*{Step 1}
The first step is visiting the neighbor nodes of $s$.\\
\begin{itemize}
    \item The distance to u = 4.
    \item The distance to v = 5.
    \item The distance to w = 3.
\end{itemize}
\textbf{Visited Nodes} : s


\begin{center}
    

	\begin{tikzpicture}
	\node[shape=circle,draw=black] (s) at (1, 2)     {\textbf{s$^0$}};
	\node[shape=circle,draw=black] (u) at (2, 4)     {\textbf{u$^4$}};
	\node[shape=circle,draw=black] (v) at (3, 2)     {\textbf{v$^5$}};
	\node[shape=circle,draw=black] (w) at (2, 0)     {\textbf{w$^3$}};
	\node[shape=circle,draw=black] (x) at (5, 2)     {\textbf{x$^\infty$}};
	\node[shape=circle,draw=black] (y) at (6, 4)     {\textbf{y$^\infty$}};
	\node[shape=circle,draw=black] (z) at (6, 0)     {\textbf{z$^\infty$}};
	\node[shape=circle,draw=black] (t) at (7, 2)     {\textbf{t$^\infty$}};
	\path[-] (s) edge node[left]{4} (u);
	\path[-] (s) edge node[above]{5} (v);
	\path[-] (u) edge [bend right=90] node[left]{1} (w);
	\path[-] (u) edge node[above]{11} (y);
	\path[-] (u) edge node[right]{8} (v);
	\path[-] (v) edge node[above]{6} (y);
	\path[-] (v) edge node[above]{2} (x);
	\path[-] (v) edge node[right]{3} (w);
	\path[-] (w) edge node[left]{3} (s);
	\path[-] (w) edge node[below]{8} (x);
	\path[-] (w) edge node[below]{12} (z);
	\path[-] (x) edge node[left]{1} (y);
	\path[-] (x) edge node[left]{6} (z);
	\path[-] (y) edge node[left]{4} (z);
	\path[-] (y) edge node[right]{9} (t);
	\path[-] (z) edge node[right]{3} (t);
	\end{tikzpicture} 
	
\end{center}


\subsubsection*{Step 2}
The second step is visiting the neighbor nodes of $w$ since it has the minimum weight among the neighbors of $s$.
\begin{itemize}
    \item The distance to u = 4. (s)
    \item The distance to v = 5. (s)
    \item The distance to w = 3. (s)
    \item The distance to x = 11. (s, w)
    \item The distance to z = 15. (s, w)
\end{itemize}
\textbf{Visited Nodes} : s, w



\begin{center}
    

	\begin{tikzpicture}
	\node[shape=circle,draw=black] (s) at (1, 2)     {\textbf{s$^0$}};
	\node[shape=circle,draw=black] (u) at (2, 4)     {\textbf{u$^4$}};
	\node[shape=circle,draw=black] (v) at (3, 2)     {\textbf{v$^5$}};
	\node[shape=circle,draw=black] (w) at (2, 0)     {\textbf{w$^3$}};
	\node[shape=circle,draw=black] (x) at (5, 2)     {\textbf{x$^{11}$}};
	\node[shape=circle,draw=black] (y) at (6, 4)     {\textbf{y$^\infty$}};
	\node[shape=circle,draw=black] (z) at (6, 0)     {\textbf{z$^{15}$}};
	\node[shape=circle,draw=black] (t) at (7, 2)     {\textbf{t$^\infty$}};
	\path[-] (s) edge node[left]{4} (u);
	\path[-] (s) edge node[above]{5} (v);
	\path[-] (u) edge [bend right=90] node[left]{1} (w);
	\path[-] (u) edge node[above]{11} (y);
	\path[-] (u) edge node[right]{8} (v);
	\path[-] (v) edge node[above]{6} (y);
	\path[-] (v) edge node[above]{2} (x);
	\path[-] (v) edge node[right]{3} (w);
	\path[-] (w) edge node[left]{3} (s);
	\path[-] (w) edge node[below]{8} (x);
	\path[-] (w) edge node[below]{12} (z);
	\path[-] (x) edge node[left]{1} (y);
	\path[-] (x) edge node[left]{6} (z);
	\path[-] (y) edge node[left]{4} (z);
	\path[-] (y) edge node[right]{9} (t);
	\path[-] (z) edge node[right]{3} (t);
	\end{tikzpicture} 
\end{center}


\subsubsection*{Step 3}
The third step is visiting the neighbor nodes of $u$ since it has the minimum weight among $u$ and $v$, which are the neighbors of $s$ that we did not visit yet.
\begin{itemize}
    \item The distance to u = 4. (s)
    \item The distance to v = 5. (s)
    \item The distance to w = 3. (s)
    \item The distance to x = 11. (s, w)
    \item The distance to z = 15. (s, w)
    \item The distance to y = 15. (s, u)
\end{itemize}
\textbf{Visited Nodes} : s, w, u


\begin{center}
    

	\begin{tikzpicture}
	\node[shape=circle,draw=black] (s) at (1, 2)     {\textbf{s$^0$}};
	\node[shape=circle,draw=black] (u) at (2, 4)     {\textbf{u$^4$}};
	\node[shape=circle,draw=black] (v) at (3, 2)     {\textbf{v$^5$}};
	\node[shape=circle,draw=black] (w) at (2, 0)     {\textbf{w$^3$}};
	\node[shape=circle,draw=black] (x) at (5, 2)     {\textbf{x$^{11}$}};
	\node[shape=circle,draw=black] (y) at (6, 4)     {\textbf{y$^{15}$}};
	\node[shape=circle,draw=black] (z) at (6, 0)     {\textbf{z$^{15}$}};
	\node[shape=circle,draw=black] (t) at (7, 2)     {\textbf{t$^\infty$}};
	\path[-] (s) edge node[left]{4} (u);
	\path[-] (s) edge node[above]{5} (v);
	\path[-] (u) edge [bend right=90] node[left]{1} (w);
	\path[-] (u) edge node[above]{11} (y);
	\path[-] (u) edge node[right]{8} (v);
	\path[-] (v) edge node[above]{6} (y);
	\path[-] (v) edge node[above]{2} (x);
	\path[-] (v) edge node[right]{3} (w);
	\path[-] (w) edge node[left]{3} (s);
	\path[-] (w) edge node[below]{8} (x);
	\path[-] (w) edge node[below]{12} (z);
	\path[-] (x) edge node[left]{1} (y);
	\path[-] (x) edge node[left]{6} (z);
	\path[-] (y) edge node[left]{4} (z);
	\path[-] (y) edge node[right]{9} (t);
	\path[-] (z) edge node[right]{3} (t);
	\end{tikzpicture} 
\end{center}

\subsubsection*{Step 4}
The fourth step is visiting the neighbor nodes of $v$, which is the last neighbor of $s$ that we did not visit yet.
\begin{itemize}
    \item The distance to u = 4. (s)
    \item The distance to v = 5. (s)
    \item The distance to w = 3. (s)
    \item The distance to x =  7 (s,v) $\to$ We updated the weight of x since $7 \leq 11 $
    \item The distance to z = 15 (s,w)
    \item The distance to y = 11 (s,v) $\to$ We updated the weight of y since $11 \leq 15 $
    
\end{itemize}
\textbf{Visited Nodes}: s, w, u, v
\begin{center}
    

	\begin{tikzpicture}
	\node[shape=circle,draw=black] (s) at (1, 2)     {\textbf{s$^0$}};
	\node[shape=circle,draw=black] (u) at (2, 4)     {\textbf{u$^4$}};
	\node[shape=circle,draw=black] (v) at (3, 2)     {\textbf{v$^5$}};
	\node[shape=circle,draw=black] (w) at (2, 0)     {\textbf{w$^3$}};
	\node[shape=circle,draw=black] (x) at (5, 2)     {\textbf{x$^{7}$}};
	\node[shape=circle,draw=black] (y) at (6, 4)     {\textbf{y$^{11}$}};
	\node[shape=circle,draw=black] (z) at (6, 0)     {\textbf{z$^{15}$}};
	\node[shape=circle,draw=black] (t) at (7, 2)     {\textbf{t$^\infty$}};
	\path[-] (s) edge node[left]{4} (u);
	\path[-] (s) edge node[above]{5} (v);
	\path[-] (u) edge [bend right=90] node[left]{1} (w);
	\path[-] (u) edge node[above]{11} (y);
	\path[-] (u) edge node[right]{8} (v);
	\path[-] (v) edge node[above]{6} (y);
	\path[-] (v) edge node[above]{2} (x);
	\path[-] (v) edge node[right]{3} (w);
	\path[-] (w) edge node[left]{3} (s);
	\path[-] (w) edge node[below]{8} (x);
	\path[-] (w) edge node[below]{12} (z);
	\path[-] (x) edge node[left]{1} (y);
	\path[-] (x) edge node[left]{6} (z);
	\path[-] (y) edge node[left]{4} (z);
	\path[-] (y) edge node[right]{9} (t);
	\path[-] (z) edge node[right]{3} (t);
	\end{tikzpicture} 
	
 \end{center}




\subsubsection*{Step 5}
The fifth step is visiting the neighbor nodes of $x$, since it has the minimum weight among the $x, y, z$
\begin{itemize}
    \item The distance to u = 4. (s)
    \item The distance to v = 5. (s)
    \item The distance to w = 3. (s)
    \item The distance to x =  7 (s,v) $\to$ We updated the weight of x since $7 \leq 11 $
    \item The distance to z = 13 (s,v,x) $\to$ We updated the weight of z since $13 \leq 15 $
    \item The distance to y = 8 (s,v,x) $\to$ We updated the weight of y since $8 \leq 11 $
    
\end{itemize}
\textbf{Visited Nodes}: s, w, u, v, x
\begin{center}
    

	\begin{tikzpicture}
	\node[shape=circle,draw=black] (s) at (1, 2)     {\textbf{s$^0$}};
	\node[shape=circle,draw=black] (u) at (2, 4)     {\textbf{u$^4$}};
	\node[shape=circle,draw=black] (v) at (3, 2)     {\textbf{v$^5$}};
	\node[shape=circle,draw=black] (w) at (2, 0)     {\textbf{w$^3$}};
	\node[shape=circle,draw=black] (x) at (5, 2)     {\textbf{x$^{7}$}};
	\node[shape=circle,draw=black] (y) at (6, 4)     {\textbf{y$^{8}$}};
	\node[shape=circle,draw=black] (z) at (6, 0)     {\textbf{z$^{13}$}};
	\node[shape=circle,draw=black] (t) at (7, 2)     {\textbf{t$^\infty$}};
	\path[-] (s) edge node[left]{4} (u);
	\path[-] (s) edge node[above]{5} (v);
	\path[-] (u) edge [bend right=90] node[left]{1} (w);
	\path[-] (u) edge node[above]{11} (y);
	\path[-] (u) edge node[right]{8} (v);
	\path[-] (v) edge node[above]{6} (y);
	\path[-] (v) edge node[above]{2} (x);
	\path[-] (v) edge node[right]{3} (w);
	\path[-] (w) edge node[left]{3} (s);
	\path[-] (w) edge node[below]{8} (x);
	\path[-] (w) edge node[below]{12} (z);
	\path[-] (x) edge node[left]{1} (y);
	\path[-] (x) edge node[left]{6} (z);
	\path[-] (y) edge node[left]{4} (z);
	\path[-] (y) edge node[right]{9} (t);
	\path[-] (z) edge node[right]{3} (t);
	\end{tikzpicture} 
	
 \end{center}



\subsubsection*{Step 6}
The sixth step is visiting the neighbor nodes of $y$ since it has the minimum weight among the $y, z$, that we did not visit yet.

\begin{itemize}

    \item The distance to u = 4. (s)
    \item The distance to v = 5. (s)
    \item The distance to w = 3. (s)
    \item The distance to x = 7 (s,v)
    \item The distance to z = 12 (s,v,x,y) $\to$ We updated the weight of z since $12 \leq 13 $ 
    \item The distance to y = 8 (s,v,x)
    \item The distance to t = 17 (s,v,x,y)
\end{itemize}
\textbf{Visited Nodes} : s, w, u, v, x, y



\begin{center}
    

	\begin{tikzpicture}
	\node[shape=circle,draw=black] (s) at (1, 2)     {\textbf{s$^0$}};
	\node[shape=circle,draw=black] (u) at (2, 4)     {\textbf{u$^4$}};
	\node[shape=circle,draw=black] (v) at (3, 2)     {\textbf{v$^5$}};
	\node[shape=circle,draw=black] (w) at (2, 0)     {\textbf{w$^3$}};
	\node[shape=circle,draw=black] (x) at (5, 2)     {\textbf{x$^{7}$}};
	\node[shape=circle,draw=black] (y) at (6, 4)     {\textbf{y$^{8}$}};
	\node[shape=circle,draw=black] (z) at (6, 0)     {\textbf{z$^{12}$}};
	\node[shape=circle,draw=black] (t) at (7, 2)     {\textbf{t$^{17}$}};
	\path[-] (s) edge node[left]{4} (u);
	\path[-] (s) edge node[above]{5} (v);
	\path[-] (u) edge [bend right=90] node[left]{1} (w);
	\path[-] (u) edge node[above]{11} (y);
	\path[-] (u) edge node[right]{8} (v);
	\path[-] (v) edge node[above]{6} (y);
	\path[-] (v) edge node[above]{2} (x);
	\path[-] (v) edge node[right]{3} (w);
	\path[-] (w) edge node[left]{3} (s);
	\path[-] (w) edge node[below]{8} (x);
	\path[-] (w) edge node[below]{12} (z);
	\path[-] (x) edge node[left]{1} (y);
	\path[-] (x) edge node[left]{6} (z);
	\path[-] (y) edge node[left]{4} (z);
	\path[-] (y) edge node[right]{9} (t);
	\path[-] (z) edge node[right]{3} (t);
	\end{tikzpicture} 
	

\end{center}


\subsubsection*{Step 7}
The seventh step is visiting the neighbor nodes of $z$
The distance costs and routes from node $s$ are as follows;
\begin{itemize}
    \item The distance to u = 4. (s)
    \item The distance to v = 5. (s)
    \item The distance to w = 3. (s)
    \item The distance to x = 7 (s,v)
    \item The distance to z = 12 (s,v,x,y) 
    \item The distance to y = 8 (s,v,x)
    \item The distance to t = 15 (s,v,x,y,z) We updated the weight of t since $15 \leq 17 $ 
\end{itemize}
\textbf{Visited Nodes} : s, w, u, v, x, y, z

\begin{center}
    

	\begin{tikzpicture}
	\node[shape=circle,draw=black] (s) at (1, 2)     {\textbf{s$^0$}};
	\node[shape=circle,draw=black] (u) at (2, 4)     {\textbf{u$^4$}};
	\node[shape=circle,draw=black] (v) at (3, 2)     {\textbf{v$^5$}};
	\node[shape=circle,draw=black] (w) at (2, 0)     {\textbf{w$^3$}};
	\node[shape=circle,draw=black] (x) at (5, 2)     {\textbf{x$^{7}$}};
	\node[shape=circle,draw=black] (y) at (6, 4)     {\textbf{y$^{8}$}};
	\node[shape=circle,draw=black] (z) at (6, 0)     {\textbf{z$^{12}$}};
	\node[shape=circle,draw=black] (t) at (7, 2)     {\textbf{t$^{15}$}};
	\path[-] (s) edge node[left]{4} (u);
	\path[-] (s) edge node[above]{5} (v);
	\path[-] (u) edge [bend right=90] node[left]{1} (w);
	\path[-] (u) edge node[above]{11} (y);
	\path[-] (u) edge node[right]{8} (v);
	\path[-] (v) edge node[above]{6} (y);
	\path[-] (v) edge node[above]{2} (x);
	\path[-] (v) edge node[right]{3} (w);
	\path[-] (w) edge node[left]{3} (s);
	\path[-] (w) edge node[below]{8} (x);
	\path[-] (w) edge node[below]{12} (z);
	\path[-] (x) edge node[left]{1} (y);
	\path[-] (x) edge node[left]{6} (z);
	\path[-] (y) edge node[left]{4} (z);
	\path[-] (y) edge node[right]{9} (t);
	\path[-] (z) edge node[right]{3} (t);
	\end{tikzpicture} 

\end{center}



\subsubsection*{Step 8}
Since there are no unvisited neighbor nodes of $t$, we reached our conclusion. \\
By using Dijkstra's Algorithm, we found the shortest path from $s$ to $t$, which is:\\

$$ s \to v \to x \to y \to z \to t$$
\begin{center}
    The total weight of the shortest path is 15.
\end{center}























\section*{Answer 4}

\subsection*{a) }
By Kruskal's Algorithm, \\
1-)A minimum spanning tree is a subset of a graph with the same number of vertices as the graph and edges equal to the number of vertices -1. \\
2-) A minimum tree should not contain any circles.\\
Number of vertices = 11\\
Hence, we should find 10 edges.\\
Step-1) Considering this, we can create our minimum spanning tree starting from the edge with the least weight, which we can choose as the edge between b and c.

$$(b-c)$$
Step-2) After this point we will continue to choose the edges that have the least weight and not create any circles. For this time, let's say the edge between d and k.
$$(d-k)$$
Step-3) $$(c-f)$$
Step-4) $$(h-i)$$
Step-5) Now, we will choose edges that have the weight 3. $$(a-b)$$
Step-6) $$(c-d)$$
Step-7) $$(f-j)$$
Step-8) Now, we will choose edges that have the weight 4.$$(e-f)$$
Step-9) $$(f-g)$$
Step-10) $$(f-i)$$
Now, we can stop here, since the number of edges = 10 = the number of vertices -1.


\subsection*{b) }
\begin{center}
    

\begin{tikzpicture}
\node (a) at (0,0) [shape = circle, draw] {a};
\node (b) at (2, 2) [shape = circle, draw] {b};
\node (c) at (5, 2) [shape= circle, draw] {c};
\node (d) at (8,2) [shape= circle, draw] {d};
\node (g) at (8,0) [shape = circle, draw] {g};
\node (i) at (5,-3) [shape=circle, draw] {i};
\node (e) at (2, 0) [shape = circle, draw] {e};
\node (h) at (2, -3) [shape= circle, draw] {h};
\node (f) at (5,0) [shape= circle, draw] {f};
\node (j) at (8,-3) [shape = circle, draw] {j};
\node (k) at (10,0) [shape=circle, draw] {k};




\path [-] (a)edge node[above left]{3} (b);
%\path [-] (a)edge node[above]{5} (d);

\path [-] (b)edge node[above left]{2} (c);

\path [-] (c)edge node[above left]{3} (d);
\path [-] (d)edge node[above right]{2} (k);
\path [-] (c)edge node[above right]{2} (f);
\path [-] (f)edge node[above right]{4} (g);
\path [-] (e)edge node[above right]{4} (f);
\path [-] (i)edge node[above right]{4} (f);
\path [-] (i)edge node[above right]{2} (h);
\path [-] (j)edge node[above right]{3} (f);

\end{tikzpicture}

Weight of the spanning tree = $w(e)$ = 29.

\end{center}


\subsection*{c) }

The uniqueness of the minimum spanning tree depends on the weight of the edge. If all the weights are unique then we can have a unique minimum spanning tree (MST) to a graph. But if we have two different edges to a node with the same weight then we can choose both the edges from that node and therefore we will again check for minimum weighted edges. In the graph $G$ weights of the edges are not unique which is why we can have another minimum tree to find if it is unique, let's review our steps.\\
\begin{itemize}
    \item Until step 8, we finished the edges with weights 2 and 3. After this point, we added the edges with weight 4.
    \item While adding the edges with weight 4, we preferred the edges $(e-f),(f-g)$, and $(f-i)$.
    \item However we could choose the edge $(g-j)$ instead of the edge $(f-g)$. 
    \item As a result of this, our minimum spanning tree would be as followings:
\end{itemize}
\begin{center}
    

\begin{tikzpicture}
\node (a) at (0,0) [shape = circle, draw] {a};
\node (b) at (2, 2) [shape = circle, draw] {b};
\node (c) at (5, 2) [shape= circle, draw] {c};
\node (d) at (8,2) [shape= circle, draw] {d};
\node (g) at (8,0) [shape = circle, draw] {g};
\node (i) at (5,-3) [shape=circle, draw] {i};
\node (e) at (2, 0) [shape = circle, draw] {e};
\node (h) at (2, -3) [shape= circle, draw] {h};
\node (f) at (5,0) [shape= circle, draw] {f};
\node (j) at (8,-3) [shape = circle, draw] {j};
\node (k) at (10,0) [shape=circle, draw] {k};




\path [-] (a)edge node[above left]{3} (b);
%\path [-] (a)edge node[above]{5} (d);

\path [-] (b)edge node[above left]{2} (c);

\path [-] (c)edge node[above left]{3} (d);
\path [-] (d)edge node[above right]{2} (k);
\path [-] (c)edge node[above right]{2} (f);
\path [-] (j)edge node[above right]{4} (g);
\path [-] (e)edge node[above right]{4} (f);
\path [-] (i)edge node[above right]{4} (f);
\path [-] (i)edge node[above right]{2} (h);
\path [-] (j)edge node[above right]{3} (f);

\end{tikzpicture}

Weight of the spanning tree = $w(e)$ = 29.

\end{center}
Although the weights of the two minimum spanning trees are the same, they are different from each other. Hence, the minimum spanning tree is not unique.
\end{document}